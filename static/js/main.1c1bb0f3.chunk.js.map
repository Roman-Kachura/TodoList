{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerNetworkError","error","dispatch","console","setAppErrorAC","message","setAppStatusAC","status","initializeAppTC","createAsyncThunk","payload","ThunkAPI","a","pr","resultCode","messages","isInitialized","isLoggedIn","slice","createSlice","name","initialState","reducers","state","action","setAppInitializedAC","extraReducers","builder","addCase","fulfilled","appReducer","reducer","actions","fetchTodolistsTC","thunkAPI","todolists","removeTodolistTC","changeTodolistEntityStatusAC","length","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","map","todolistID","splice","unshift","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","addTaskTC","task","updateTaskTC","getState","find","t","warn","apiModel","deadline","description","priority","startDate","tasksReducer","forEach","taskID","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","app","auth","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","loginTC","logoutTC","authReducer","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","display","justifyContent","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1c1bb0f3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fc44aa55-3392-48f7-a00e-41bc59417a62'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}));\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}));\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}));\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    console.error(error);\r\n    dispatch(setAppErrorAC({error: error.message ? error.message: 'Some error occurred'}));\r\n    dispatch(setAppStatusAC({status: 'failed'}));\r\n}\r\n","import {authAPI} from '../api/todolists-api';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n};\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeAppTC', async (payload, ThunkAPI) => {\r\n    ThunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    const pr = await authAPI.me();\r\n    try {\r\n        if (pr.data.resultCode !== 0) {\r\n            throw pr.data.messages;\r\n        }\r\n        ThunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        return {isInitialized: true, isLoggedIn: true};\r\n    } catch (e) {\r\n        handleServerNetworkError({message: pr.data.messages[0]}, ThunkAPI.dispatch);\r\n        return {isInitialized: true, isLoggedIn: false};\r\n    }\r\n});\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state, action) => {\r\n            state.isInitialized = action.payload.isInitialized;\r\n        })\r\n    }\r\n});\r\n\r\nexport const appReducer = slice.reducer;\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n};\r\n\r\nexport const {setAppErrorAC, setAppStatusAC, setAppInitializedAC} = slice.actions;\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC,} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\n// Thunks\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodoLists', async (payload, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    const pr = await todolistsAPI.getTodolists();\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n    return {todolists: pr.data};\r\n});\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodoList', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}));\r\n    const pr = await todolistsAPI.deleteTodolist(todolistId);\r\n    try {\r\n        if (pr.data.messages.length) {\r\n            throw pr.data.messages;\r\n        }\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {id: todolistId};\r\n    } catch (e) {\r\n        handleServerNetworkError({message: pr.data.messages[0]}, thunkAPI.dispatch);\r\n    }\r\n});\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist', async (title: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    const pr = await todolistsAPI.createTodolist(title);\r\n    try {\r\n        if (pr.data.messages.length) {\r\n            throw pr.data.messages;\r\n        }\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolist: pr.data.data.item};\r\n    } catch (e) {\r\n        handleServerNetworkError({message: pr.data.messages[0]}, thunkAPI.dispatch);\r\n    }\r\n});\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (payload: { id: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id: payload.id, status: 'loading'}));\r\n    const pr = await todolistsAPI.updateTodolist(payload.id, payload.title);\r\n    try {\r\n        if (pr.data.messages.length) {\r\n            throw pr.data.messages;\r\n        }\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        thunkAPI.dispatch(changeTodolistEntityStatusAC({id: payload.id, status: 'succeeded'}));\r\n        return {id: payload.id, title: payload.title};\r\n    } catch (e) {\r\n        thunkAPI.dispatch(changeTodolistEntityStatusAC({id: payload.id, status: 'failed'}));\r\n        handleServerNetworkError({message: pr.data.messages[0]}, thunkAPI.dispatch);\r\n    }\r\n});\r\n\r\n// Reducer\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}));\r\n        });\r\n\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const todolistID = action.payload.id;\r\n                const index = state.findIndex(tl => tl.id === todolistID);\r\n                if (index > -1) {\r\n                    state.splice(index, 1);\r\n                }\r\n            }\r\n        });\r\n\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'});\r\n            }\r\n        });\r\n\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const todolistID = action.payload.id;\r\n                const index = state.findIndex(tl => tl.id === todolistID);\r\n                state[index].title = action.payload.title;\r\n            }\r\n        });\r\n    }\r\n});\r\nexport const todolistsReducer = slice.reducer;\r\n\r\n// Actions\r\nexport const {changeTodolistFilterAC, changeTodolistEntityStatusAC} = slice.actions;\r\n\r\n// Types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n};\r\n","import {addTodolistTC, changeTodolistEntityStatusAC, fetchTodolistsTC, removeTodolistTC} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n//Thunks\r\n\r\nexport const fetchTasksTC = createAsyncThunk('task/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}));\r\n    const pr = await todolistsAPI.getTasks(todolistId);\r\n    const tasks: Array<TaskType> = pr.data.items;\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'succeeded'}));\r\n    return {tasks, todolistId}\r\n})\r\nexport const removeTaskTC = createAsyncThunk('task/removeTask', async (payload: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id: payload.todolistId, status: 'loading'}));\r\n    const pr = await todolistsAPI.deleteTask(payload.todolistId, payload.taskId);\r\n    try {\r\n        if (pr.data.messages.length) {\r\n            throw pr.data.messages;\r\n        }\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        thunkAPI.dispatch(changeTodolistEntityStatusAC({id: payload.todolistId, status: 'succeeded'}));\r\n        return {taskId: payload.taskId, todolistId: payload.todolistId};\r\n    } catch (e) {\r\n        thunkAPI.dispatch(changeTodolistEntityStatusAC({id: payload.todolistId, status: 'failed'}));\r\n        handleServerNetworkError({message: pr.data.messages[0]}, thunkAPI.dispatch);\r\n    }\r\n})\r\nexport const addTaskTC = createAsyncThunk('task/addTask', async (payload: { title: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id: payload.todolistId, status: 'loading'}));\r\n    const pr = await todolistsAPI.createTask(payload.todolistId, payload.title)\r\n    try {\r\n        if (pr.data.messages.length) {\r\n            throw pr.data.messages;\r\n        }\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        thunkAPI.dispatch(changeTodolistEntityStatusAC({id: payload.todolistId, status: 'succeeded'}));\r\n        return {task: pr.data.data.item}\r\n    } catch (e) {\r\n        thunkAPI.dispatch(changeTodolistEntityStatusAC({id: payload.todolistId, status: 'failed'}));\r\n        handleServerNetworkError({message: pr.data.messages[0]}, thunkAPI.dispatch);\r\n    }\r\n})\r\nexport const updateTaskTC = createAsyncThunk('task/updateTask', async (payload: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    const state: any = thunkAPI.getState();\r\n    const task = state.tasks[payload.todolistId].find((t: { id: string }) => t.id === payload.taskId);\r\n    if (!task) {\r\n        console.warn('task not found in the state');\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...payload.model\r\n    }\r\n\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id: payload.todolistId, status: 'loading'}));\r\n    const pr = await todolistsAPI.updateTask(payload.todolistId, payload.taskId, apiModel)\r\n    try {\r\n        if (pr.data.messages.length) {\r\n            throw pr.data.messages[0];\r\n        }\r\n\r\n        if (pr.data.resultCode !== 0){\r\n            throw pr.data.resultCode;\r\n        }\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        thunkAPI.dispatch(changeTodolistEntityStatusAC({id: payload.todolistId, status: 'succeeded'}));\r\n        return {...payload};\r\n    } catch (e) {\r\n        thunkAPI.dispatch(changeTodolistEntityStatusAC({id: payload.todolistId, status: 'failed'}));\r\n        handleServerNetworkError({message: pr.data.messages[0]}, thunkAPI.dispatch);\r\n    }\r\n})\r\n\r\n//Reducer\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state[action.payload.todolist.id] = [];\r\n            }\r\n\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            if (action.payload) delete state[action.payload.id];\r\n        });\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks;\r\n        });\r\n\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const taskID = action.payload.taskId;\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === taskID);\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state[action.payload.task.todoListId].unshift(action.payload.task);\r\n            }\r\n        });\r\n\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const taskID = action.payload.taskId;\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === taskID);\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId: id, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({todolistId, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId: id, todolistId, model: {status}})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId: id, todolistId, model: {title: newTitle}})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm disabled={status === 'loading'} addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {initializeAppTC, setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\n// Thunks\r\nexport const loginTC = createAsyncThunk('auth/loginTC', async (payload: { data: LoginParamsType }, ThunkAPI) => {\r\n    ThunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    const pr = await authAPI.login(payload.data);\r\n    try {\r\n        if (pr.data.messages.length || pr.data.resultCode !== 0) {\r\n            throw pr.data;\r\n        }\r\n        ThunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        return {isLoggedIn: true}\r\n    } catch (e) {\r\n        handleServerNetworkError({message: pr.data.messages[0]}, ThunkAPI.dispatch);\r\n    }\r\n});\r\nexport const logoutTC = createAsyncThunk('auth/logoutTC', async (payload, ThunkAPI) => {\r\n    ThunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    const pr = await authAPI.logout();\r\n    try {\r\n        if (pr.data.messages.length || pr.data.resultCode !== 0) {\r\n            throw pr.data;\r\n        }\r\n        ThunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        return {isLoggedIn: false}\r\n    } catch (e) {\r\n        handleServerNetworkError({message: pr.data.messages[0]}, ThunkAPI.dispatch);\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.isLoggedIn = action.payload.isLoggedIn;\r\n            }\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.isLoggedIn = action.payload.isLoggedIn;\r\n            }\r\n        })\r\n        builder.addCase(initializeAppTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn;\r\n        })\r\n    }\r\n});\r\n\r\nexport const authReducer = slice.reducer;\r\n\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC({data: values}));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress color='secondary'/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\" color='primary'>\r\n                <Toolbar style={{display: 'flex', justifyContent: 'end'}}>\r\n                    <Typography variant=\"h6\">\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Typography>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color='secondary'/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer'\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer'\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer;\r\nexport type AppRootStateType = ReturnType<RootReducerType>;\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}